{
	"name": "Validate Data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group1sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c93db8e3-4a0b-4958-913b-29c9fcc8875d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group1-week7/providers/Microsoft.Synapse/workspaces/group1-synapse/bigDataPools/group1sparkpool",
				"name": "group1sparkpool",
				"type": "Spark",
				"endpoint": "https://group1-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group1sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\n",
					"\n",
					"/* \n",
					"SELECT 'silver_kunnat' AS table_name, \n",
					"       COUNT(*) AS missing_count,\n",
					"       CASE \n",
					"           WHEN COUNT(*) = COUNT(DISTINCT Kunta_koodi) THEN 'Unique'\n",
					"           ELSE 'Duplicates Found' \n",
					"       END AS uniqueness_status\n",
					"FROM silver_kunnat\n",
					"WHERE Kunta_koodi IS NULL OR Maakunta_koodi IS NULL OR Hyvinvointialue_koodi IS NULL\n",
					"OR Suuralue_koodi IS NULL OR Seutukunta_koodi IS NULL OR Kielisuhde_koodi IS NULL OR Kuntaryhma_koodi IS NULL\n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT 'silver_liikuntapaikat', \n",
					"       COUNT(*),\n",
					"       CASE \n",
					"           WHEN COUNT(*) = COUNT(DISTINCT Kunta_koodi) THEN 'Unique'\n",
					"           ELSE 'Duplicates Found' \n",
					"       END\n",
					"FROM silver_liikuntapaikat\n",
					"WHERE Kunta_koodi IS NULL OR Asukasluku IS NULL OR Liikuntapaikkojen_lkm IS NULL\n",
					"OR Liikuntapaikkojen_lkm_per_1000 IS NULL\n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT 'silver_paavo', \n",
					"       COUNT(*),\n",
					"       CASE \n",
					"           WHEN COUNT(*) = COUNT(DISTINCT Kunta) THEN 'Unique'\n",
					"           ELSE 'Duplicates Found' \n",
					"       END\n",
					"FROM silver_paavo\n",
					"WHERE Kunta IS NULL OR Asukkaat_yhteensa IS NULL \n",
					"OR Miehet IS NULL OR Naiset IS NULL OR Asukkaiden_keski_ika IS NULL \n",
					"OR 18_vuotta_tayttaneet IS NULL OR Koulutetut_yhteensa IS NULL \n",
					"OR Ylioppilastutkinnon_suorittaneet IS NULL OR Ammatillisen_tutkinnon_suorittaneet IS NULL \n",
					"OR Alemman_korkeakoulututkinnon_suorittaneet IS NULL OR Ylemman_korkeakoulututkinnon_suorittaneet IS NULL \n",
					"OR Keskitulot IS NULL OR Mediaanitulot IS NULL OR Alimpaan_tuloluokkaan_kuuluvat IS NULL \n",
					"OR Keskimmaiseen_tuloluokkaan_kuuluvat IS NULL OR Ylimpaan_tuloluokkaan_kuuluvat IS NULL \n",
					"OR Talouksien_keskikoko IS NULL OR Asumisvaljyys IS NULL OR Yksinasuvien_taloudet IS NULL \n",
					"OR Omistusasunnoissa_asuvat_taloudet IS NULL OR Vuokra_asunnoissa_asuvat_taloudet IS NULL \n",
					"OR Tyopaikat IS NULL OR Tyolliset IS NULL OR Tyottomat IS NULL \n",
					"OR Lapset_0_14_vuotiaat IS NULL OR Opiskelijat IS NULL OR Elakelaiset IS NULL\n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT 'silver_paihde', \n",
					"       COUNT(*),\n",
					"       CASE \n",
					"           WHEN COUNT(*) = COUNT(DISTINCT Kuntanumero) THEN 'Unique'\n",
					"           ELSE 'Duplicates Found' \n",
					"       END\n",
					"FROM silver_paihde\n",
					"WHERE Kuntanumero IS NULL\n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT 'silver_psykologia', \n",
					"       COUNT(*),\n",
					"       CASE \n",
					"           WHEN COUNT(*) = COUNT(DISTINCT Kuntanumero) THEN 'Unique'\n",
					"           ELSE 'Duplicates Found' \n",
					"       END\n",
					"FROM silver_psykologia\n",
					"WHERE Kuntanumero IS NULL \n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT 'silver_vaikuttavat', \n",
					"       COUNT(*),\n",
					"       CASE \n",
					"           WHEN COUNT(*) = COUNT(DISTINCT Kuntanumero) THEN 'Unique'\n",
					"           ELSE 'Duplicates Found' \n",
					"       END\n",
					"FROM silver_vaikuttavat\n",
					"WHERE Kuntanumero IS NULL;\n",
					"*/\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"result = spark.sql(\"\"\"\n",
					"    SELECT 'silver_kunnat' AS table_name, \n",
					"           COUNT(*) AS missing_count,\n",
					"           CASE \n",
					"               WHEN COUNT(*) = COUNT(DISTINCT Kunta_koodi) THEN 'Unique'\n",
					"               ELSE 'Duplicates Found' \n",
					"           END AS uniqueness_status\n",
					"    FROM silver_kunnat\n",
					"    WHERE Kunta_koodi IS NULL \n",
					"      OR Maakunta_koodi IS NULL \n",
					"      OR Hyvinvointialue_koodi IS NULL\n",
					"      OR Suuralue_koodi IS NULL \n",
					"      OR Seutukunta_koodi IS NULL \n",
					"      OR Kielisuhde_koodi IS NULL \n",
					"      OR Kuntaryhma_koodi IS NULL\n",
					"      OR NOT Kunta_koodi RLIKE '^[0-9]{3}$'  -- Check for 3 numeric characters in Kunta_koodi\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"    SELECT 'silver_liikuntapaikat', \n",
					"           COUNT(*),\n",
					"           CASE \n",
					"               WHEN COUNT(*) = COUNT(DISTINCT Kunta_koodi) THEN 'Unique'\n",
					"               ELSE 'Duplicates Found' \n",
					"           END\n",
					"    FROM silver_liikuntapaikat\n",
					"    WHERE Kunta_koodi IS NULL \n",
					"      OR Asukasluku IS NULL \n",
					"      OR Liikuntapaikkojen_lkm IS NULL\n",
					"      OR Liikuntapaikkojen_lkm_per_1000 IS NULL\n",
					"      OR NOT Kunta_koodi RLIKE '^[0-9]{3}$'  -- Check for 3 numeric characters in Kunta_koodi\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"    SELECT 'silver_paavo', \n",
					"           COUNT(*),\n",
					"           CASE \n",
					"               WHEN COUNT(*) = COUNT(DISTINCT Kunta) THEN 'Unique'\n",
					"               ELSE 'Duplicates Found' \n",
					"           END\n",
					"    FROM silver_paavo\n",
					"    WHERE Kunta IS NULL \n",
					"      OR Asukkaat_yhteensa IS NULL \n",
					"      OR Miehet IS NULL \n",
					"      OR Naiset IS NULL \n",
					"      OR Asukkaiden_keski_ika IS NULL \n",
					"      OR 18_vuotta_tayttaneet IS NULL \n",
					"      OR Koulutetut_yhteensa IS NULL \n",
					"      OR Ylioppilastutkinnon_suorittaneet IS NULL \n",
					"      OR Ammatillisen_tutkinnon_suorittaneet IS NULL \n",
					"      OR Alemman_korkeakoulututkinnon_suorittaneet IS NULL \n",
					"      OR Ylemman_korkeakoulututkinnon_suorittaneet IS NULL \n",
					"      OR Keskitulot IS NULL \n",
					"      OR Mediaanitulot IS NULL \n",
					"      OR Alimpaan_tuloluokkaan_kuuluvat IS NULL \n",
					"      OR Keskimmaiseen_tuloluokkaan_kuuluvat IS NULL \n",
					"      OR Ylimpaan_tuloluokkaan_kuuluvat IS NULL \n",
					"      OR Talouksien_keskikoko IS NULL \n",
					"      OR Asumisvaljyys IS NULL \n",
					"      OR Yksinasuvien_taloudet IS NULL \n",
					"      OR Omistusasunnoissa_asuvat_taloudet IS NULL \n",
					"      OR Vuokra_asunnoissa_asuvat_taloudet IS NULL \n",
					"      OR Tyopaikat IS NULL \n",
					"      OR Tyolliset IS NULL \n",
					"      OR Tyottomat IS NULL \n",
					"      OR Lapset_0_14_vuotiaat IS NULL \n",
					"      OR Opiskelijat IS NULL \n",
					"      OR Elakelaiset IS NULL\n",
					"      OR NOT Kunta RLIKE '^[0-9]{3}$'  -- Check for 3 numeric characters in Kunta\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"    SELECT 'silver_paihde', \n",
					"           COUNT(*),\n",
					"           CASE \n",
					"               WHEN COUNT(*) = COUNT(DISTINCT Kuntanumero) THEN 'Unique'\n",
					"               ELSE 'Duplicates Found' \n",
					"           END\n",
					"    FROM silver_paihde\n",
					"    WHERE Kuntanumero IS NULL\n",
					"      OR NOT Kuntanumero RLIKE '^[0-9]{3}$'  -- Check for 3 numeric characters in Kuntanumero\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"    SELECT 'silver_psykologia', \n",
					"           COUNT(*),\n",
					"           CASE \n",
					"               WHEN COUNT(*) = COUNT(DISTINCT Kuntanumero) THEN 'Unique'\n",
					"               ELSE 'Duplicates Found' \n",
					"           END\n",
					"    FROM silver_psykologia\n",
					"    WHERE Kuntanumero IS NULL\n",
					"      OR NOT Kuntanumero RLIKE '^[0-9]{3}$'  -- Check for 3 numeric characters in Kuntanumero\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"    SELECT 'silver_vaikuttavat', \n",
					"           COUNT(*),\n",
					"           CASE \n",
					"               WHEN COUNT(*) = COUNT(DISTINCT Kuntanumero) THEN 'Unique'\n",
					"               ELSE 'Duplicates Found' \n",
					"           END\n",
					"    FROM silver_vaikuttavat\n",
					"    WHERE Kuntanumero IS NULL\n",
					"      OR NOT Kuntanumero RLIKE '^[0-9]{3}$'  -- Check for 3 numeric characters in Kuntanumero\n",
					"\"\"\").collect()\n",
					"\n",
					"# Store results in variables\n",
					"validation_results = []\n",
					"for row in result:\n",
					"    table_name = row[\"table_name\"]\n",
					"    missing_count = row[\"missing_count\"]\n",
					"    uniqueness_status = row[\"uniqueness_status\"]\n",
					"\n",
					"    validation_results.append((table_name, missing_count, uniqueness_status))\n",
					"\n",
					"# Check if any table has missing values or duplicates\n",
					"for table_name, missing_count, uniqueness_status in validation_results:\n",
					"    if missing_count > 0 or uniqueness_status == \"Duplicates Found\":\n",
					"        raise ValueError(f\"Validation failed for {table_name}: {missing_count} missing values or duplicates found.\")\n",
					"\n",
					"print(\"Validation passed for all tables.\")\n",
					""
				],
				"execution_count": 7
			}
		]
	}
}