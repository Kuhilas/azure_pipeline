{
	"name": "SotkanetTransform",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group1sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "dd4e9212-be95-48ec-bb6f-308958360c2a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group1-week7/providers/Microsoft.Synapse/workspaces/group1-synapse/bigDataPools/group1sparkpool",
				"name": "group1sparkpool",
				"type": "Spark",
				"endpoint": "https://group1-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group1sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Starting spark\n",
					"print(\"Moro maailma!\")\n",
					"\n",
					"# Get required libraries\n",
					"%pip install openpyxl\n",
					"import pyspark as ps \n",
					"import pandas as pd\n",
					"import openpyxl"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Reading the files to pd dataframes"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Define path and file name\n",
					"lakehouse_path = \"abfss://sotkanet-data@group1adls.dfs.core.windows.net/\"\n",
					"filename = \"Psykologia.xlsx\"\n",
					"\n",
					"# Read other files\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Cleaning Psykologia-table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# read to df frame with modular path\n",
					"\n",
					"df_psykologia = pd.read_excel(\n",
					"    f\"{lakehouse_path}{filename}\", \n",
					"    engine='openpyxl', \n",
					"    header=1,  \n",
					"    dtype={\"Unnamed: 1\": str}  # Ensure the second column is read as a string\n",
					")\n",
					"\n",
					"# Write new headers as a list\n",
					"\n",
					"new_headers = [\"Kunta\", \"Kuntanumero\", \"Masennuslaakkeista korvausta saaneet 0-17v\",\n",
					"\"Masennuslaakkeista korvausta saaneet 18-64v\", \"Kuntoutuspsykoterapiaa saaneet 25-65v\", \"Psykiatrian laitoshoidon potilaat\"]\n",
					"\n",
					"# Insert as headers\n",
					"df_psykologia.columns = new_headers\n",
					"\n",
					"# Define the columns that need to be converted from per 1,000 to percentages\n",
					"columns_to_convert = [\n",
					"    \"Masennuslaakkeista korvausta saaneet 18-64v\",\n",
					"    \"Kuntoutuspsykoterapiaa saaneet 25-65v\",\n",
					"    \"Psykiatrian laitoshoidon potilaat\"\n",
					"    ]\n",
					"\n",
					"# Convert per 1,000 to percentage\n",
					"df_psykologia[columns_to_convert] = (df_psykologia[columns_to_convert] / 10)\n",
					"\n",
					"df_psykologia[\"Masennuslaakkeista korvausta saaneet 0-17v\"] = df_psykologia[\"Masennuslaakkeista korvausta saaneet 0-17v\"].round(2)\n",
					"\n",
					"df_psykologia.head()"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Cleaning VaikuttavatTekijat-table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_vaikuttavat.head()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"filename = \"VaikuttavatTekijat.xlsx\"\n",
					"df_vaikuttavat = pd.read_excel(\n",
					"    f\"{lakehouse_path}{filename}\", \n",
					"    engine='openpyxl', \n",
					"    header=1,  \n",
					"    dtype={\"Unnamed: 1\": str}  # Ensure the second column is read as a string\n",
					")\n",
					"\n",
					"new_headers = [\"Kunta\", \"Kuntanumero\",\"Asunnottomat\",\"Kodin ulkopuolelle sijoitetut 13-17v\",\n",
					"\"Koulutuksen ulkopuolella 17-24v\", \"Toimeentulotukea saavissa kotitalouksissa asuvat\"]\n",
					"\n",
					"df_vaikuttavat.columns = new_headers\n",
					"\n",
					"# List of columns to round\n",
					"columns_to_dcm = [\n",
					"    \"Asunnottomat\",\n",
					"    \"Kodin ulkopuolelle sijoitetut 13-17v\",\n",
					"    \"Koulutuksen ulkopuolella 17-24v\",\n",
					"    \"Toimeentulotukea saavissa kotitalouksissa asuvat\"\n",
					"]\n",
					"\n",
					"# Apply rounding to each specified column\n",
					"df_vaikuttavat[columns_to_dcm] = df_vaikuttavat[columns_to_dcm].round(2)\n",
					"\n",
					"df_vaikuttavat.head()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Cleaning Paihde-Table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_paihde.head()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"source": [
					"filename = \"Paihde.xlsx\"\n",
					"df_paihde = pd.read_excel(\n",
					"    f\"{lakehouse_path}{filename}\", \n",
					"    engine='openpyxl', \n",
					"    header=1,  \n",
					"    dtype={\"Unnamed: 1\": str}  # Ensure the second column is read as a string\n",
					")\n",
					"\n",
					"# Write new headers as a list\n",
					"\n",
					"new_headers = [\n",
					"    \"Kunta\", \"Kuntanumero\", \"Alkoholijuomien myynti asukasta kohti 100 %:n alkoholina, litraa\",\n",
					"    \"Omalla paikkakunnalla helppo hankkia huumeita 8-9lk\",\n",
					"    \"Poliisin tietoon tulleet huumausainerikokset\",\n",
					"    \"Poliisin tietoon tulleet rattijuopumustapaukset\",\n",
					"    \"Paihdehuollon asumispalveluissa asiakkaita\",\n",
					"    \"Paihdehuollon avopalveluissa asiakkaita\",\n",
					"    \"Paihteiden vaikutuksen alaisina tehdyt rikokset\",\n",
					"    \"Paihtyneiden sailoonotot\",\n",
					"    \"Vanhemman liiallinen alkoholinkaytto aiheuttanut haittaa 4-5lk\",\n",
					"    \"Vanhemman liiallinen alkoholinkaytto aiheuttanut haittaa 1-2lk lukio\"\n",
					"]\n",
					"\n",
					"df_paihde.columns = new_headers\n",
					"\n",
					"\n",
					"# List the columns to be converted (those with values per 1,000 people)\n",
					"columns_to_convert = [\n",
					"    \"Poliisin tietoon tulleet huumausainerikokset\",\n",
					"    \"Poliisin tietoon tulleet rattijuopumustapaukset\",\n",
					"    \"Paihdehuollon asumispalveluissa asiakkaita\",\n",
					"    \"Paihdehuollon avopalveluissa asiakkaita\",\n",
					"    \"Paihteiden vaikutuksen alaisina tehdyt rikokset\",\n",
					"    \"Paihtyneiden sailoonotot\"\n",
					"]\n",
					"\n",
					"# Convert per 1,000 to percentage\n",
					"df_paihde[columns_to_convert] = df_paihde[columns_to_convert] / 10\n",
					"df_paihde[\"Vanhemman liiallinen alkoholinkaytto aiheuttanut haittaa 4-5lk\"] = df_paihde[\"Vanhemman liiallinen alkoholinkaytto aiheuttanut haittaa 4-5lk\"].round(2)\n",
					"df_paihde[\"Vanhemman liiallinen alkoholinkaytto aiheuttanut haittaa 1-2lk lukio\"] = df_paihde[\"Vanhemman liiallinen alkoholinkaytto aiheuttanut haittaa 1-2lk lukio\"].round(2)\n",
					"\n",
					"# Check the result\n",
					"df_paihde.head()\n",
					"\n",
					"spark.createDataFrame(df_paihde).write.saveAsTable(\"silver_paihde\", mode=\"overwrite\", path=\"abfss://sotkanet-data@group1adls.dfs.core.windows.net/paihde_silver/\")"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}